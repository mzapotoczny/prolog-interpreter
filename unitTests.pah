app f g = f (g x);
if True x y = x;
if False x y = y;
add x y = x+y

and x y = if x y False;
or x y = if x True y;
not x = if x False True;

ack 0 n = n+1;
ack m 0 = ack (m-1) 1;
ack m n = ack (m-1) (ack m (n-1));

ones = Cons 1 (ones);

take 0 zs = Nil;
take n (Cons x xs) = Cons x (take (n-1) xs);

sieve (Cons x xs) = filter (\ y -> y mod x /= 0) xs;

filter p Nil = Nil;
filter p (Cons x xs) = if (p x) (Cons x (filter p xs)) (filter p xs);

tail (Cons x xs) = xs;
head (Cons x xs) = x; 

map f Nil = Nil;
map f (Cons x xs) = Cons (f x) (map f xs);

zipWith f Nil ys = Nil;
zipWith f xs Nil = Nil;
zipWith f (Cons x xs) (Cons y ys) = Cons (f x y) (zipWith f xs ys);

fib = Cons 1 (Cons 1 (zipWith (\ x -> \ y -> x+y) fib (tail fib))); 

foldr f c Nil = c;
foldr f c (Cons x xs) = f x (foldr f c xs);

ins x Nil = Cons x Nil;
ins x (Cons y ys) = if (x < y) (Cons x (Cons y ys)) (Cons y (ins x ys));

sort = foldr ins Nil;

sum Nil = 0;
sum (Cons x xs) = x + (sum xs);

enumFrom n = Cons n (enumFrom (n+1));

iterate f a = Cons a (iterate f (f a));

primes = map head (iterate sieve (enumFrom 2));

idlist = foldr Cons Nil;
